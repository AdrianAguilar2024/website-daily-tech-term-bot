[
  {
    "term": "API (Application Programming Interface)",
    "definition": "A set of rules and protocols that allows different software applications to communicate with each other. It defines the methods and data formats that applications can use to request and exchange information."
  },
  {
    "term": "Algorithm",
    "definition": "A step-by-step procedure or formula for solving a problem or accomplishing a task. It is a sequence of instructions that a computer can follow to perform a specific operation."
  },
  {
    "term": "Binary",
    "definition": "A number system that uses only two digits, 0 and 1. It is the fundamental language of computers, representing all data as sequences of these two values."
  },
  {
    "term": "Bug",
    "definition": "An error, flaw, or fault in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways."
  },
  {
    "term": "Cache",
    "definition": "A temporary storage area that stores the results of recent data requests or computations. It allows for faster data retrieval by avoiding the need to access the slower, primary storage location."
  },
  {
    "term": "Cloud",
    "definition": "A global network of remote servers that are used to store, manage, and process data, rather than on a local server or personal computer. It enables on-demand access to computing resources."
  },
  {
    "term": "Cookie",
    "definition": "A small piece of data sent from a website and stored on the user's computer by the user's web browser. It is used to remember stateful information or to record the user's browsing activity."
  },
  {
    "term": "CPU (Central Processing Unit)",
    "definition": "The primary component of a computer that performs most of the processing inside a computer. It is often referred to as the 'brain' of the computer."
  },
  {
    "term": "Database",
    "definition": "An organized collection of structured information, or data, typically stored electronically in a computer system. It is managed by a Database Management System (DBMS)."
  },
  {
    "term": "DNS (Domain Name System)",
    "definition": "The internet's phonebook. It translates human-readable domain names (like www.google.com) into machine-readable IP addresses (like 172.217.14.228)."
  },
  {
    "term": "Domain",
    "definition": "A unique name that identifies a website on the internet. It provides a user-friendly address for accessing web resources, such as adrian-aguilar.com."
  },
  {
    "term": "Encryption",
    "definition": "The process of converting information or data into a code, especially to prevent unauthorized access. It scrambles readable text so it can only be read by someone who has the secret key to decrypt it."
  },
  {
    "term": "Ethernet",
    "definition": "A standard communication protocol used to create local area networks (LANs). It defines how devices can format and transmit data over a wired network."
  },
  {
    "term": "Firewall",
    "definition": "A network security system that monitors and controls incoming and outgoing network traffic based on predetermined security rules. It establishes a barrier between a trusted internal network and an untrusted external network."
  },
  {
    "term": "Firmware",
    "definition": "A specific class of computer software that provides low-level control for a device's specific hardware. It is held in non-volatile memory devices such as ROM or flash memory."
  },
  {
    "term": "Gigabyte (GB)",
    "definition": "A unit of digital information storage equal to one billion bytes. It is commonly used to measure the capacity of storage devices, such as hard drives and memory."
  },
  {
    "term": "GPU (Graphics Processing Unit)",
    "definition": "A specialized electronic circuit designed to rapidly manipulate and alter memory to accelerate the creation of images in a frame buffer intended for output to a display device."
  },
  {
    "term": "HTML (HyperText Markup Language)",
    "definition": "The standard markup language for documents designed to be displayed in a web browser. It forms the basic structure and content of web pages."
  },
  {
    "term": "HTTP (Hypertext Transfer Protocol)",
    "definition": "The foundation of data communication for the World Wide Web. It is an application protocol for distributed, collaborative, hypermedia information systems."
  },
  {
    "term": "IP Address",
    "definition": "A unique numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication. It serves as an identifier for a specific machine on a particular network."
  }
]
```4.  Click **"Commit new file"**.

#### **Step 2: Delete `terms_list.txt`**

This file is no longer needed.
1.  Click on the `terms_list.txt` file in your repository.
2.  Click the **trash can icon** to delete it.
3.  Commit the change.

#### **Step 3: Update the Python Script (`update_term.py`)**

Now, we will give the bot its final, simplified instructions. This script no longer needs `requests` or `BeautifulSoup`.

1.  Go back to your `update_term.py` file and click the **pencil icon** to edit it.
2.  **DELETE EVERYTHING** in the file and **replace it with this new, complete, and reliable version:**

```python
import os
import random
import json # Import the json library
from pexels_api import API
from datetime import datetime

# --- CONFIGURATION ---
PORTFOLIO_REPO_PATH = "../AdrianAguilar2024.github.io"
PORTFOLIO_HTML_FILE = f"{PORTFOLIO_REPO_PATH}/index.html"
PEXELS_API_KEY = os.getenv("PEXELS_API_KEY")

# --- 1. GET A TERM FROM OUR LOCAL JSON FILE ---
def get_tech_term():
    try:
        # Read our local dictionary of terms and definitions
        with open('definitions.json', 'r', encoding='utf-8') as f:
            terms_data = json.load(f)
        
        if not terms_data:
            print("Error: definitions.json is empty or not found.")
            return None, None
            
        # Pick a random term object from the list
        random_term_obj = random.choice(terms_data)
        title = random_term_obj['term']
        definition = random_term_obj['definition']
        
        print(f"Selected random term from local file: {title}")
        return title, definition
    except FileNotFoundError:
        print("Error: definitions.json not found. Please create it.")
        return None, None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None, None

# --- 2. GET A RELEVANT IMAGE ---
def get_term_image(query):
    if not PEXELS_API_KEY:
        print("Pexels API Key not found.")
        return "https://via.placeholder.com/800x400"
    try:
        api = API(PEXELS_API_KEY)
        api.search(query, page=1, results_per_page=1)
        if not api.get_entries():
            print(f"No image found for '{query}'. Using a generic tech image.")
            api.search("technology abstract", page=random.randint(1, 10), results_per_page=1)
            if not api.get_entries():
                return "https://via.placeholder.com/800x400"
        photo = api.get_entries()[0]
        image_url = photo.original
        print(f"Found image for '{query}': {image_url}")
        return image_url
    except Exception as e:
        print(f"Error getting image from Pexels: {e}")
        return "https://via.placeholder.com/800x400"

# --- 3. UPDATE THE HTML FILE ---
def update_portfolio(title, definition, image_url, date_str):
    try:
        with open(PORTFOLIO_HTML_FILE, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # We will use simple string replacement, which is safer than parsing the whole HTML
        # This looks for special "placeholder" comments in your HTML
        from bs4 import BeautifulSoup
        soup = BeautifulSoup(html_content, 'html.parser')
        
        img_tag = soup.find(id='tech-term-image')
        title_tag = soup.find(id='tech-term-title')
        date_tag = soup.find(id='tech-term-date')
        def_tag = soup.find(id='tech-term-definition')

        if not all([img_tag, title_tag, date_tag, def_tag]):
            print("Error: Could not find all the required IDs in the HTML file.")
            return

        img_tag['src'] = image_url
        img_tag['alt'] = f"Image related to {title}"
        title_tag.string = title
        date_tag.string = f"Updated: {date_str}"
        def_tag.string = definition
        
        with open(PORTFOLIO_HTML_FILE, 'w', encoding='utf-8') as f:
            f.write(str(soup.prettify()))
        print("Successfully updated index.html!")
    except Exception as e:
        print(f"Error updating HTML file: {e}")

# --- MAIN EXECUTION ---
if __name__ == "__main__":
    term_title, term_def = get_tech_term()
    if term_title and term_def:
        today_date = datetime.now().strftime("%B %d, %Y")
        search_query = term_title.split('(')[0].strip()
        term_image_url = get_term_image(search_query)
        update_portfolio(term_title, term_def, term_image_url, today_date)
